{"version":3,"file":"corePackages/geoview-footer-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-footer-panel/src/details-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/legend-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/data-item.tsx","webpack://geoview-core/../geoview-footer-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport { ReactElement } from 'react';\r\n\r\nimport { TypeWindow, payloadIsAllQueriesDone, payloadIsQueryLayer, TypeArrayOfLayerData, getLocalizedValue } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the details component\r\n *\r\n * @returns {JSX.Element} created details component\r\n */\r\nexport function DetailsItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\r\n  const [latlng, setLatLng] = useState<unknown>([]);\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [list, setList] = useState<ReactElement>();\r\n\r\n  useEffect(() => {\r\n    // create the listener to return the details\r\n    api.event.on(\r\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n      (payload) => {\r\n        if (payloadIsAllQueriesDone(payload)) {\r\n          const { resultSets } = payload;\r\n          const newDetails: TypeArrayOfLayerData = [];\r\n          Object.keys(resultSets).forEach((layerPath) => {\r\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\r\n            const features = resultSets[layerPath]!;\r\n            if (features.length > 0) {\r\n              newDetails.push({ layerPath, layerName, features });\r\n            }\r\n          });\r\n          if (newDetails.length > 0) {\r\n            setDetails(newDetails);\r\n          } else {\r\n            setDetails([]);\r\n          }\r\n        } else {\r\n          setDetails([]);\r\n        }\r\n      },\r\n      mapId,\r\n      `${mapId}-DetailsAPI`\r\n    );\r\n    api.event.on(\r\n      api.eventNames.GET_FEATURE_INFO.QUERY_LAYER,\r\n      (payload) => {\r\n        if (payloadIsQueryLayer(payload)) {\r\n          const { location } = payload;\r\n          setLatLng(location);\r\n        } else {\r\n          setLatLng([]);\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    return () => {\r\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\r\n      api.event.off(api.eventNames.GET_FEATURE_INFO.QUERY_LAYER, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setList(api.map(mapId).details.createDetails(mapId, details, { mapId, location: latlng }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [details, latlng]);\r\n\r\n  return <div>{list}</div>;\r\n}\r\n","/* eslint-disable react/require-default-props */\r\nimport { DetailedReactHTMLElement } from 'react';\r\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the legend component\r\n *\r\n * @returns {JSX.Element} created legend component\r\n */\r\nexport function LegendItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [legend, setLegend] = useState<DetailedReactHTMLElement<{}, HTMLElement>>();\r\n  const [mapLayers, setMapLayers] = useState<string[]>([]);\r\n\r\n  const addLayer = (addGeoviewLayerId: string) => {\r\n    if (Object.keys(api.map(mapId).layer.geoviewLayers).includes(addGeoviewLayerId)) {\r\n      setMapLayers((orderedLayers) => [addGeoviewLayerId, ...orderedLayers]);\r\n    } else {\r\n      console.error('geoviewLayerId is not in the layers list');\r\n    }\r\n  };\r\n\r\n  const removeLayer = (removeGeoviewLayerId: string) => {\r\n    setMapLayers((orderedLayers) => orderedLayers.filter((layerId) => layerId !== removeGeoviewLayerId));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMapLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\r\n      (payload) => {\r\n        if (payloadIsRemoveGeoViewLayer(payload)) {\r\n          removeLayer(payload.geoviewLayer.geoviewLayerId);\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    api.event.on(\r\n      api.eventNames.LAYER.EVENT_ADD_LAYER,\r\n      (payload) => {\r\n        if (payloadIsALayerConfig(payload)) {\r\n          api.event.on(\r\n            api.eventNames.LAYER.EVENT_LAYER_ADDED,\r\n            () => {\r\n              addLayer(payload.layerConfig.geoviewLayerId);\r\n              api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId, payload.layerConfig.geoviewLayerId);\r\n            },\r\n            mapId,\r\n            payload.layerConfig.geoviewLayerId\r\n          );\r\n        }\r\n      },\r\n      mapId\r\n    );\r\n    return () => {\r\n      api.event.off(api.eventNames.LAYER.EVENT_ADD_LAYER, mapId);\r\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLegend(api.map(mapId).legend.createLegend({ layerIds: mapLayers }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [mapLayers]);\r\n\r\n  return <div>{legend}</div>;\r\n}\r\n","/* eslint-disable react/require-default-props */\r\nimport { DetailedReactHTMLElement, JSXElementConstructor, ReactElement } from 'react';\r\nimport { TypeWindow, payloadIsALayerConfig, payloadIsRemoveGeoViewLayer, getLocalizedValue } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the data grid footer component\r\n *\r\n * @returns {JSX.Element} created data grid footer component\r\n */\r\nexport function DataItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, ui, react } = cgpv;\r\n  const { Tabs } = ui.elements;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [dataLayers, setDataLayers] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    setDataLayers(Object.keys(api.map(mapId!).layer.geoviewLayers));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Tabs\r\n      tabsProps={{\r\n        variant: 'scrollable',\r\n      }}\r\n      tabs={dataLayers.map((layerId, index): any => {\r\n        const geoviewLayerInstance = api.map(mapId).layer.geoviewLayers[layerId];\r\n\r\n        return {\r\n          value: index,\r\n          label: getLocalizedValue(geoviewLayerInstance.geoviewLayerName, mapId),\r\n          content: () => api.map(mapId).dataGrid.createDataGrid({ layerId }),\r\n        }\r\n      })}\r\n    />\r\n  );\r\n}\r\n","import {\r\n  Cast,\r\n  AbstractPlugin,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  AnySchemaObject,\r\n  payloadIsAllQueriesDone,\r\n  TypeArrayOfFeatureInfoEntries,\r\n} from 'geoview-core';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-footer-panel.json';\r\nimport { DetailsItem } from './details-item';\r\nimport { LegendItem } from './legend-item';\r\nimport { DataItem } from './data-item';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ntype CustomTabs = {\r\n  title: string;\r\n  contentHTML: string;\r\n};\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass FooterPanelPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {AnySchemaObject} the package schema\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      legend: 'Legend',\r\n      details: 'Details',\r\n      dataGrid: 'Data',\r\n    },\r\n    fr: {\r\n      legend: 'Légende',\r\n      details: 'Détails',\r\n      dataGrid: 'Données',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n      const { displayLanguage, footerTabs, map } = api.map(mapId);\r\n\r\n      const mapContainer = map.getTargetElement().parentElement;\r\n      if (mapContainer) {\r\n        mapContainer.style.height = 'calc( 100% - 300px )';\r\n      }\r\n\r\n      const defaultTabs = configObj?.tabs.defaultTabs as Array<string>;\r\n      let tabsCounter = 0;\r\n\r\n      if (defaultTabs.includes('legend')) {\r\n        // create new tab and add the LegendComponent to the footer tab\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].legend as string,\r\n          content: () => <LegendItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      // create the listener to return the details\r\n      if (defaultTabs.includes('details')) {\r\n        // create new tab and add the DetailComponent to the footer tab\r\n        const detailsTabValue = tabsCounter;\r\n        footerTabs.createFooterTab({\r\n          value: detailsTabValue,\r\n          label: this.translations[displayLanguage].details as string,\r\n          content: () => <DetailsItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n        // select the details tab when map click queries are done\r\n        api.event.on(\r\n          api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n          (payload) => {\r\n            if (payloadIsAllQueriesDone(payload)) {\r\n              const { resultSets } = payload;\r\n              let features: TypeArrayOfFeatureInfoEntries = [];\r\n              Object.keys(resultSets).forEach((layerPath) => {\r\n                features = features.concat(resultSets[layerPath]!);\r\n              });\r\n              if (features.length > 0) {\r\n                footerTabs.selectFooterTab(detailsTabValue);\r\n              }\r\n            }\r\n          },\r\n          mapId,\r\n          `${mapId}-DetailsAPI`\r\n        );\r\n      }\r\n\r\n      if (defaultTabs.includes('data-grid')) {\r\n        /// create new tab and add the DataGridComponent to the footer tab\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: this.translations[displayLanguage].dataGrid as string,\r\n          content: () => <DataItem mapId={mapId} />,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n\r\n      // TODO add custom detail reusable component when done\r\n\r\n      const customTabs = configObj?.tabs.customTabs as Array<string>;\r\n      for (let i = 0; i < customTabs.length; i++) {\r\n        const tab = customTabs[i] as unknown as CustomTabs;\r\n\r\n        footerTabs.createFooterTab({\r\n          value: tabsCounter,\r\n          label: tab.title,\r\n          content: tab.contentHTML,\r\n        });\r\n        tabsCounter++;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    // const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      // const { api } = cgpv;\r\n      // TODO: Enable the footer tabs removal\r\n    }\r\n  }\r\n}\r\n\r\nexport default FooterPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['footer-panel'] = Cast<AbstractPlugin>(FooterPanelPlugin);\r\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","latlng","setLatLng","list","setList","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","QUERY_LAYER","payloadIsQueryLayer","location","off","createDetails","LegendItem","legend","setLegend","mapLayers","setMapLayers","geoviewLayers","LAYER","EVENT_REMOVE_LAYER","removeGeoviewLayerId","payloadIsRemoveGeoViewLayer","geoviewLayer","geoviewLayerId","orderedLayers","filter","layerId","EVENT_ADD_LAYER","payloadIsALayerConfig","EVENT_LAYER_ADDED","addGeoviewLayerId","layerConfig","includes","console","error","createLegend","layerIds","DataItem","ui","Tabs","elements","dataLayers","setDataLayers","tabsProps","variant","tabs","index","geoviewLayerInstance","value","label","geoviewLayerName","content","dataGrid","createDataGrid","FooterPanelPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","fr","configObj","pluginProps","displayLanguage","footerTabs","mapContainer","getTargetElement","parentElement","style","height","defaultTabs","tabsCounter","createFooterTab","translations","detailsTabValue","concat","selectFooterTab","customTabs","i","tab","title","contentHTML","buttonPanel","AbstractPlugin","plugins","Cast"],"sourceRoot":""}