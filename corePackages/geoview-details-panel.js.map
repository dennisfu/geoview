{"version":3,"file":"corePackages/geoview-details-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-details-panel/src/details-item.tsx","webpack://geoview-core/../geoview-details-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\r\nimport { ReactElement } from 'react';\r\n\r\nimport { TypeWindow, payloadIsAllQueriesDone, TypeArrayOfLayerData, getLocalizedValue } from 'geoview-core';\r\n\r\ninterface Props {\r\n  mapId: string;\r\n}\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create an element that displays the details component\r\n *\r\n * @returns {JSX.Element} created details component\r\n */\r\nexport function DetailsItem({ mapId }: Props): JSX.Element {\r\n  const { cgpv } = w;\r\n  const { api, react } = cgpv;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const [details, setDetails] = useState<TypeArrayOfLayerData>([]);\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  const [list, setList] = useState<ReactElement>();\r\n\r\n  useEffect(() => {\r\n    // create the listener to return the details\r\n    api.event.on(\r\n      api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE,\r\n      (payload) => {\r\n        if (payloadIsAllQueriesDone(payload)) {\r\n          const { resultSets } = payload;\r\n          const newDetails: TypeArrayOfLayerData = [];\r\n          Object.keys(resultSets).forEach((layerPath) => {\r\n            const layerName = getLocalizedValue(api.map(mapId).layer.registeredLayers[layerPath].layerName, mapId)!;\r\n            const features = resultSets[layerPath]!;\r\n            if (features.length > 0) {\r\n              newDetails.push({ layerPath, layerName, features });\r\n            }\r\n          });\r\n          if (newDetails.length > 0) {\r\n            setDetails(newDetails);\r\n          } else {\r\n            setDetails([]);\r\n          }\r\n        } else {\r\n          setDetails([]);\r\n        }\r\n      },\r\n      mapId,\r\n      `${mapId}-DetailsAPI`\r\n    );\r\n    return () => {\r\n      api.event.off(api.eventNames.GET_FEATURE_INFO.ALL_QUERIES_DONE, mapId);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setList(api.map(mapId).details.createDetails(mapId, details, { backgroundStyle: 'dark', singleColumn: true }));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [details]);\r\n\r\n  return <div>{list}</div>;\r\n}\r\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport {\r\n  Cast,\r\n  AbstractPlugin,\r\n  toJsonObject,\r\n  TypeJsonObject,\r\n  TypeWindow,\r\n  TypePluginOptions,\r\n  TypeButtonPanel,\r\n  TypeIconButtonProps,\r\n  TypePanelProps,\r\n  AnySchemaObject,\r\n} from 'geoview-core';\r\nimport { DetailsItem } from './details-item';\r\n// import PanelContent from './panel-content';\r\n// import { payloadBaseClass } from 'geoview-core/src/api/events/payloads/payload-base-class';\r\n\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-details-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass DetailsPlugin extends AbstractPlugin {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(pluginId: string, props: TypePluginOptions) {\r\n    super(pluginId, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the schema that is defined for this package\r\n   *\r\n   * @returns {AnySchemaObject} returns the schema for this package\r\n   */\r\n  schema = (): AnySchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    en: {\r\n      detailsPanel: 'Details',\r\n      nothing_found: 'Nothing found',\r\n      click_map: 'Choose a point on the map to start',\r\n      action_back: 'Back',\r\n    },\r\n    fr: {\r\n      detailsPanel: 'Détails',\r\n      nothing_found: 'Aucun résultat',\r\n      click_map: 'Choisissez un point sur la carte pour commencer',\r\n      action_back: 'Retour',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api, ui } = cgpv;\r\n    const { DetailsIcon } = ui.elements;\r\n    const { displayLanguage } = api.map(mapId);\r\n\r\n    let panelStatus = false;\r\n\r\n    panelStatus = this.configObj?.isOpen?.large as boolean;\r\n\r\n    // button props\r\n    const button: TypeIconButtonProps = {\r\n      id: 'detailsPanelButton',\r\n      tooltip: this.translations[displayLanguage].detailsPanel as string,\r\n      tooltipPlacement: 'right',\r\n      children: <DetailsIcon />,\r\n      visible: true,\r\n    };\r\n\r\n    // panel props\r\n    const panel: TypePanelProps = {\r\n      title: this.translations[displayLanguage].detailsPanel,\r\n      icon: '<i class=\"material-icons\">details</i>',\r\n      width: 300,\r\n      status: panelStatus,\r\n    };\r\n\r\n    // create a new button panel on the app-bar\r\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n    // set panel content\r\n    this.buttonPanel?.panel?.changeContent(<DetailsItem mapId={mapId} />);\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    // access the api calls\r\n    const { api } = cgpv;\r\n\r\n    if (this.buttonPanel) {\r\n      api.map(mapId as string).appBarButtons.removeAppbarPanel(this.buttonPanel.buttonPanelId);\r\n      // api.event.emit(payloadBaseClass(api.eventNames.MARKER_ICON.EVENT_MARKER_ICON_HIDE, mapId));\r\n    }\r\n  }\r\n}\r\n\r\nexport default DetailsPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['details-panel'] = Cast<AbstractPlugin>(DetailsPlugin);\r\n"],"names":["w","window","DetailsItem","mapId","cgpv","api","react","useState","useEffect","details","setDetails","list","setList","event","on","eventNames","GET_FEATURE_INFO","ALL_QUERIES_DONE","payload","payloadIsAllQueriesDone","resultSets","newDetails","Object","keys","forEach","layerPath","layerName","getLocalizedValue","map","layer","registeredLayers","features","length","push","off","createDetails","backgroundStyle","singleColumn","DetailsPlugin","pluginId","props","schema","toJsonObject","defaultConfig","en","detailsPanel","nothing_found","click_map","action_back","fr","panelStatus","pluginProps","DetailsIcon","ui","elements","displayLanguage","configObj","isOpen","large","button","id","tooltip","translations","tooltipPlacement","children","visible","panel","title","icon","width","status","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","buttonPanelId","AbstractPlugin","plugins","Cast"],"sourceRoot":""}